rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // 用戶文檔規則
    match /users/{userID} {
      // 用戶可以完全控制自己的文檔
      allow read, write: if request.auth != null && request.auth.uid == userID;
      
      // 其他已登入用戶可以讀取基本資料（用於配對驗證）
      allow read: if request.auth != null;
      
      // 配對功能：允許更新他人的 pairedWith 欄位（僅限配對操作）
      allow update: if request.auth != null && 
                   isValidPairingUpdate(request.auth.uid, userID, request.resource.data);
      
      // 心情歷史子集合規則
      match /moodHistory/{moodHistoryID} {
        // 用戶可以讀寫自己的心情歷史
        allow read, write: if request.auth != null && request.auth.uid == userID;
      }
      
      // 情緒子集合規則（為未來功能預留）
      match /moods/{moodID} {
        // 用戶可以讀寫自己的情緒
        allow read, write: if request.auth != null && request.auth.uid == userID;
        
        // 伴侶可以讀取（如果設定為可見）
        allow read: if request.auth != null && 
                   isPartner(request.auth.uid, userID) &&
                   resource.data.privacy.isPrivate == false;
      }
    }
    
    // 配對關係規則（為未來功能預留）
    match /partnerships/{partnershipID} {
      // 只允許參與者讀寫
      allow read, write: if request.auth != null && 
                        (request.auth.uid in resource.data.users.user1.userID ||
                         request.auth.uid in resource.data.users.user2.userID);
    }
    
    // 模板規則（只讀）
    match /templates/{templateID} {
      allow read: if request.auth != null;
    }
    
    // 檢查是否為伴侶的函數
    function isPartner(currentUserID, targetUserID) {
      return exists(/databases/$(database)/documents/users/$(currentUserID)) &&
             get(/databases/$(database)/documents/users/$(currentUserID)).data.pairedWith == targetUserID;
    }
    
    // 驗證配對更新是否有效
    function isValidPairingUpdate(requesterUID, targetUID, newData) {
      let existingData = resource.data;
      
      // 檢查是否只更新了 pairedWith 欄位
      let onlyPairedWithChanged = 
        newData.keys().hasOnly(['name', 'email', 'createdAt', 'lastLoginAt', 'mood', 'lastUpdated', 'pairedWith']) &&
        (newData.name == existingData.name || !existingData.keys().hasAny(['name'])) &&
        (newData.email == existingData.email || !existingData.keys().hasAny(['email'])) &&
        (newData.mood == existingData.mood || !existingData.keys().hasAny(['mood'])) &&
        (newData.lastUpdated == existingData.lastUpdated || !existingData.keys().hasAny(['lastUpdated']));
      
      // 檢查 pairedWith 欄位是否設為請求者的 UID（雙向配對）
      let validPairingValue = newData.pairedWith == requesterUID;
      
      return onlyPairedWithChanged && validPairingValue;
    }
  }
} 